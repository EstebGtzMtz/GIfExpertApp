{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem/GifGridItem.js","components/GifGrid/GifGrid.js","hooks/useFetchGifs.js","pages/GifExpertApp.js","serviceWorker.js","index.js"],"names":["AddCategory","setCategories","useState","addCategoryInputValue","setaddCategoryInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifsImages","map","el","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","img","key","GifExpertApp","setcategories","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+OAkCeA,EA/BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEmBC,mBAAS,IAF5B,mBAEhCC,EAFgC,KAETC,EAFS,KAgBvC,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAsBK,OAAOC,OAAS,IACrCR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAA+BO,OACxDN,EAAyB,OAMzB,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAyBE,EAAEQ,OAAOF,Y,uBCR7BG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAaD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EAC9B,MAAO,CACHC,GAAID,EAAGC,GACPC,MAAOF,EAAGE,MACVV,IAAG,UAAEQ,EAAGG,cAAL,aAAE,EAAWC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCeLO,G,MAZK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE1B,OACI,yBAAKc,UAAU,kBACX,yBAAKC,IAAKf,EAAKgB,IAAI,mBACnB,yBAAKF,UAAU,cACX,gCAAMJ,EAAN,SCkBDO,G,MAtBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDbiBK,CAAa1B,GAA9BO,EAFuB,EAEvBA,KAAMa,EAFiB,EAEjBA,QAEb,OACI,6BACA,gCAAMpB,EAAN,KACKoB,GAAW,gBACZ,yBAAKJ,UAAU,oBAEPT,EAAKE,KAAI,SAAAkB,GAAG,OACR,kBAAC,EAAD,eACIC,IAAKD,EAAIhB,IACLgB,WEMjBE,EApBM,WAAO,IAAD,EAEa3C,mBAAS,CAAC,iBAFvB,mBAEhBQ,EAFgB,KAEJoC,EAFI,KAIvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAa7C,cAAe6C,IAC5B,6BACA,4BAEQpC,EAAWe,KAAI,SAAAC,GAAE,OACb,kBAAC,EAAD,CAASkB,IAAKlB,EAAIV,SAAUU,U,MCJhCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.30aa6c71.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport propTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\n    const [addCategoryInputValue, setaddCategoryInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setaddCategoryInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(addCategoryInputValue.trim().length > 2){\n            setCategories( categories => [addCategoryInputValue, ...categories]);\n            setaddCategoryInputValue(''); \n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit} >\n            <input\n                type='text'\n                value={addCategoryInputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: propTypes.func.isRequired\n}\n\nexport default AddCategory;","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=IqbJOTP4VsfrkWM7M8XWSFVNub9UiRTc&limit=10`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifsImages = data.map(el => {\n        return {\n            id: el.id,\n            title: el.title,\n            url: el.images?.downsized_medium.url\n        }\n    });\n\n    return gifsImages;\n}","import React from 'react';\nimport './style.css';\n\nconst GifGridItem = ({ title, url }) => {\n\n    return (\n        <div className='card-container'>\n            <img src={url} alt='from giphy API' />\n            <div className='title-card'>\n                <h4> {title} </h4>\n            </div>\n        </div>\n    )\n}\n\nexport default GifGridItem;","import React from 'react';\nimport { useFetchGifs } from '../../hooks/useFetchGifs';\nimport GifGridItem from '../GifGridItem/GifGridItem';\nimport './style.css';\n\nconst GifGrid = ({ category }) => {\n\n    const {data, loading} = useFetchGifs(category);\n\n    return (\n        <div>\n        <h3> {category} </h3>\n            {loading && 'Cargando.....'}\n            <div className=\"images-container\">\n                {\n                    data.map(img => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            </div>\n        </div>\n        )\n}\n\nexport default GifGrid;","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/GetGifs\";\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setstate] = useState({\n        data:[],\n        loading: true\n    });\n\n    useEffect(()=>{\n        getGifs(category)\n            .then( imgs => {\n                setstate({\n                    data: imgs,\n                    loading: false\n                });\n            });\n    }, [category]);\n\n    return state;\n}","import React, { useState } from 'react';\nimport AddCategory from '../components/AddCategory'\nimport GifGrid from '../components/GifGrid/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setcategories] = useState(['Master Chief'])\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setcategories} />\n            <hr />\n            <ul>\n                {\n                    categories.map(el => (\n                        <GifGrid key={el} category={el} />\n                    ))\n                }\n            </ul>\n        </>\n    )\n}\n\nexport default GifExpertApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './pages/GifExpertApp';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}